//
//  File.swift
//  LiveRadioApp
//
//  Created by Daniil Murzin on 15.12.2024.
//






import SwiftUI


///–°–∏–Ω—É—Å–æ–∏–¥–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏:

/// A ‚Äì –∞–º–ø–ª–∏—Ç—É–¥–∞: –≤—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑).
/// f ‚Äì —á–∞—Å—Ç–æ—Ç–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ª–Ω –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–µ.
/// x ‚Äì –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
/// œï ‚Äì —Ñ–∞–∑–∞: —Å–¥–≤–∏–≥ –≤–æ–ª–Ω—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏).
/// C ‚Äì —Å–¥–≤–∏–≥ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –≤–æ–ª–Ω—ã.
///
/// 2. –ö–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
/// x ‚Äì –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –æ—Ç 0 –¥–æ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞.
/// x –º—ã –≤—ã—á–∏—Å–ª–∏–º y –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≤—ã—à–µ.
///
///
/// –ê–º–ø–ª–∏—Ç—É–¥–∞ (A) = 50 (–≤—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã).
/// –ß–∞—Å—Ç–æ—Ç–∞ (f) = 2ùúã / —à–∏—Ä–∏–Ω–∞ (–æ–¥–Ω–∞ –≤–æ–ª–Ω–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É).
/// –§–∞–∑–∞ (ùúô) = 0 (–±–µ–∑ —Å–¥–≤–∏–≥–∞).
/// –¶–µ–Ω—Ç—Ä (ùê∂) = –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞.



import SwiftUI

struct SingleWaveView: View {
    var body: some View {
        ZStack {
            Color.mainBg
            WaveShape(amplitudes: [5, -10, 30, -10, 10, -20, 10, -10, 0])
                .stroke(Color.white, lineWidth: 3)
                .padding()
                .frame(width: 87, height: 34)
        }
                .frame(width: 87, height: 34)
    }
}

struct WaveShape: Shape {
    let amplitudes: [CGFloat] // –†–∞–∑–Ω—ã–µ –∞–º–ø–ª–∏—Ç—É–¥—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        
        let width = rect.width
        let midY = rect.height / 2  // –¶–µ–Ω—Ç—Ä –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        let segmentWidth = width / CGFloat(amplitudes.count - 1) // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
        path.move(to: CGPoint(x: 0, y: midY + amplitudes[0]))
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞–º —Å –∫—É–±–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏–≤—ã–º–∏
        for index in 1..<amplitudes.count {
            let startX = CGFloat(index - 1) * segmentWidth
            let endX = CGFloat(index) * segmentWidth
            
            let controlX1 = startX + segmentWidth / 3
            let controlY1 = midY + amplitudes[index - 1]
            
            let controlX2 = startX + 2 * segmentWidth / 3
            let controlY2 = midY + amplitudes[index]
            
            let endY = midY + amplitudes[index]
            
            path.addCurve(to: CGPoint(x: endX, y: endY),
                          control1: CGPoint(x: controlX1, y: controlY1),
                          control2: CGPoint(x: controlX2, y: controlY2))
        }
        
        return path
    }
}

#Preview {
    SingleWaveView()
        .frame(width: 300, height: 150)
}
